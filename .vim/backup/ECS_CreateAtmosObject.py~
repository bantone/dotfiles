import base64, hmac, sha, time, subprocess, re
from email.Utils import formatdate
import sys
import getopt,json

def getAuthToken(ECSNode, User, Password):
    curlCommand = "curl -i -k https://%s:4443/login -u %s:%s" % (ECSNode, User, Password)
    print ("Executing getAuthToken: %s " % curlCommand)
    res=subprocess.check_output(curlCommand, shell=True)
    print res
    authTokenPattern = "X-SDS-AUTH-TOKEN:(.*)\r\n"
    searchObject=re.search(authTokenPattern,res)
    assert searchObject, "Get Auth Token failed"
    print("Auth Token %s" % searchObject.group(1))
    return searchObject.group(1)

def executeRestAPI(url, method, filter, data, ECSNode,contentType='json',checkOutput=0):
    if data:
        subprocess.call("echo %s > request_body.tmp" % data, shell=True)
        data="-d @request_body.tmp"
    if "license" in url:
        data="-T license.xml"
    curlCommand = "curl -s -k -X %s -H 'Content-Type:application/%s' \
    -H 'X-SDS-AUTH-TOKEN:%s' \
    -H 'ACCEPT:application/%s' \
    %s https://%s:9011%s" %(method, contentType, AuthToken, contentType,data, ECSNode, url)
    print ("Executing REST API command: %s " % curlCommand)
#print jsonResult
    if checkOutput:
        subprocess.call(curlCommand, shell=True)
        jsonResult = subprocess.check_output(curlCommand, shell=True)
        RestOutputDict = {}
        RestOutputDict = json.loads(jsonResult)
        return RestOutputDict
        assert "code" not in jsonResult, "%s %s failed" % (method, url)
    else:
        res=subprocess.call(curlCommand, shell=True)
        print res

def executeAtmosRequest(method, contentType, date, signature, url, responsePattern = "HTTP/1.1 204 No Content", user="", filetoupload=""):
    if filetoupload=="" :
        curlCommand =["curl", "-s", "-k", "-X", "%s" % method,  "-H", "Content-Type:%s" % contentType, "-H", "x-emc-date:%s" % date, "-H", "x-emc-uid:%s" % user, "-H", "x-emc-signature:%s" % signature, "%s" % url, "-v"]
    else:
        curlCommand =["curl", "-s", "-k", "-X", "%s" % method,  "-H", "Content-Type:%s" % contentType, "-H", "x-emc-date:%s" % date, "-H", "x-emc-uid:%s" % user, "-H", "x-emc-signature:%s" % signature, "-T", "%s" %filetoupload,"%s" % url, "-v"]
    proc = subprocess.Popen(curlCommand, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o, e = proc.communicate()
    searchObject = re.search(responsePattern,e)
    assert searchObject, "Executing Atmos %s method failed. Expected %s but found %s" % (method, responsePattern, e)
    return e
        
def getRequestSignature(method, contentType, url, date, user, secretKey):
    signstr="%s\n%s\n\n\n%s\nx-emc-date:%s\nx-emc-uid:%s" %(method, contentType, url, date, user)
    return base64.b64encode(hmac.new(base64.b64decode("%s" % secretKey), "%s" %signstr, sha).digest())
    
def CreateSubtenant(ECSNode, UserName, SecretKey):
    date=formatdate(time.time())
    date = "%sGMT" % date.split("-0000")[0]
    url="/rest/subtenant"
    createSubtenantSignature=getRequestSignature("PUT", "text/plain", "/rest/subtenant", date, UserName, SecretKey)
    print ("Create atmos subtenant")
    SubtenId=executeAtmosRequest("PUT", "text/plain", date, createSubtenantSignature, "https://%s:9023%s" % (ECSNode, url), responsePattern="HTTP/1.1 204 No Content", user=UserName)
    print("Atmos Subtenant creation is successful %s" % SubtenId)
    m = re.search("subtenantID\:\s+(.*)\s",SubtenId)
    subid=re.sub("\r","",m.group(1))
    print ("Subtenant Id  %s is extracted successfully:" % (subid))
    return subid
            
def CreateObject(ECSNode, SubtenantId, UserName, SecretKey):
    date=formatdate(time.time())
    date = "%sGMT" % date.split("-0000")[0]
    url="/rest/objects"
    uid=SubtenantId+"/%s" % UserName
    createSubtenantSignature=getRequestSignature("POST", "text/plain", "/rest/objects", date,uid, SecretKey)
    print ("Create atmos object")
    ObjectId=executeAtmosRequest("POST", "text/plain", date, createSubtenantSignature, "https://%s:9023%s" % (ECSNode, url), "HTTP/1.1 201 Created" , uid, "/etc/hosts")
    print ("Atmos object creation is successful")
    m = re.search("Location\:\s+(.*)\s",ObjectId)
    ObjId=re.sub("\r","",m.group(1))
    print("Object Id  %s is extracted: " % (ObjId))
    return ObjId   

def getUserSecretKey(ECSNode, username):
    print ("Fetch secret key for User %s" % username)
    secretKeyDict = executeRestAPI("/object/user-secret-keys/%s" % username, 'GET', '.secret_key', "", ECSNode, checkOutput=1)
    print ("\n\nUser %s SecretKey is %s" % (username,secretKeyDict['secret_key_1']))
    return secretKeyDict['secret_key_1']
    
def main(argv):
    try:
        opts, argv = getopt.getopt(argv, '', ["ECSNodes=","UserName="])
    except getopt.GetoptError, e:
        print e
        sys.exit(2)

    ECSNodes=""
    MethodName=""
    for opt, arg in opts:
        if opt == '-h':
            
            sys.exit()
        elif opt in ("-ECSNodes", "--ECSNodes"):
            ECSNodes = arg
            ECSNodeList = ECSNodes.split(",")
            ECSNode = ECSNodeList[0]
        elif opt in ("-UserName", "--UserName"):
            UserName = arg
       
    print("ECSNodes: %s" %ECSNode)
    print("UserName: %s" %UserName)
    global AuthToken
    global SwiftAuthToken
    AuthToken=getAuthToken(ECSNode, "root", "ChangeMe")
    SecretKey=getUserSecretKey(ECSNode, UserName) 
    print("SecretKey: %s" % SecretKey)
    SubtenantId=CreateSubtenant(ECSNode, UserName, SecretKey)
    CreateObject(ECSNode, SubtenantId, UserName, SecretKey)
        
    sys.exit()


if __name__ == "__main__":
    main(sys.argv[1:]) 


